public Program() {


}

public void Save() {

}

string[] waypoints, alignment; 
Vector3D destination, align = new Vector3D();
bool aligning, ap, moving, traveling = false;
IList<Vector3D> path = new List<Vector3D> ( ); 
IList<string> pathInfo = new List<string> ();
int index = 0;                    

public void Main(string argument) {
   
var gts = GridTerminalSystem;

IMyTerminalBlock remote=gts.GetBlockWithName("remote") as IMyTerminalBlock; 
IMyTimerBlock timer = gts.GetBlockWithName("timer") as IMyTimerBlock; 
IMyShipController rc = (IMyShipController)remote;     
IMyRemoteControl rem = (IMyRemoteControl)rc; 
List<IMyTerminalBlock> gyros = new List<IMyTerminalBlock>(); 
gts.GetBlocksOfType<IMyGyro>( gyros ); 
var ant = gts.GetBlockWithName("frigate1") as IMyRadioAntenna;

Echo( "%: " + (2%4).ToString() );

Vector3D desired = remote.WorldMatrix.Translation + (300 * remote.WorldMatrix.Down);

if ( argument == "a" ) {  
rem.ClearWaypoints();   
rem.AddWaypoint( desired, "de" );   
rem.ApplyAction("Down");   
rem.SetAutoPilotEnabled( true );   
} 
 
if( argument == "clear" )  
rem.ClearWaypoints();  
  
if( argument == "add" )  
rem.AddWaypoint( desired, "dest" );  
  
if( argument == "go" )   
rem.SetAutoPilotEnabled( true );  

 bool ap = false; 
 
if ( argument == "d" ) { 
 
rem.ClearWaypoints();  
rem.AddWaypoint( destination, "dock" );  
rem.ApplyAction("Forward");  
rem.SetAutoPilotEnabled( true );  
}

if( argument == "dock" ) 
ant.TransmitMessage( "RequestDock", MyTransmitTarget.Everyone); 
           
if( argument == "Accepted" ) 
ant.TransmitMessage( "Ready", MyTransmitTarget.Everyone ); 
       
if ( argument.Split( ',' )[0] == "Waypoints" ) 
{ 
waypoints = argument.Split( ','); 
foreach( string i in waypoints )
 Echo( i );

} 



} //end main


bool Align( string face, Vector3D coord ) 
{
var gts = GridTerminalSystem;
var thrusters = new List<IMyThrust>( );
IMyTerminalBlock remote = gts.GetBlockWithName("remote") as IMyTerminalBlock; 
IMyRemoteControl rem = (IMyRemoteControl)remote; 
gts.GetBlocksOfType<IMyThrust>( thrusters );

if (aligning == false )
{
foreach( IMyThrust th in thrusters )
    th.ApplyAction("Off");
               
rem.ClearWaypoints();   
rem.AddWaypoint( coord, "alignTo" );   
rem.ApplyAction( face );   
rem.SetAutoPilotEnabled( true );  
}

if ( aligning == true && !rem.IsAutoPilotEnabled )
{
foreach( IMyThrust th in thrusters ) 
    th.ApplyAction("On");

return false;
}
return true;
}

bool Move( string face, Vector3D coord  )
{ 
IMyTerminalBlock remote = GridTerminalSystem.GetBlockWithName( "remote" ) as IMyTerminalBlock;  
IMyRemoteControl rem = (IMyRemoteControl)remote;  
 
if( moving == false )
{
rem.ClearWaypoints();    
rem.AddWaypoint( coord, "moveTo" );    
rem.ApplyAction( face );    
rem.SetAutoPilotEnabled( true );   
}
if( moving == true && !rem.IsAutoPilotEnabled ) 
 return false;

return true;
}

/*   */
bool Travel( string[] waypoints )
{
 //path, pathInfo
 if( traveling == false )
 {
  int k = -1 ;
  int r = 0;
  for( int i = 0; i < waypoints.Length; i++)
  { 
   if ( i%4 == 0 )
   {
    pathInfo[ i ] = waypoints[ i+1 ];
    k++;
    r = 0;
   }
   else
   { 
    path[ k ].SetDim( r, Convert.ToDouble( waypoints[ i+1 ] ) ) ;      
    r++;
   }
  } // for
 } // if

if( aligning == false && moving == false )
 {
 if( pathInfo[index].Split( ':' ) [0] == "Move" )
  moving = Move( pathInfo[index].Split( ':' ) [1], path[ index ] );
 if( pathInfo[index].Split( ':' ) [0] == "Align" )
  aligning = Align( pathInfo[index].Split( ':' ) [1], path[ index ] );
 }

 return true;
}
